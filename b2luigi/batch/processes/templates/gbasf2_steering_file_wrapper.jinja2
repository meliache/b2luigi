#!/usr/bin/env python3
import os
import pickle

import basf2
from basf2 import pickle_path as b2pp
from variables import variables as vm


def deserialize_module_or_pymodule(module_state):
    # if module is bytestream, which we use for python modules, just use pickle to load it
    if isinstance(module_state, bytes):
        module = pickle.loads(module_state)
        basf2.register_module(module)
        return module

    module = basf2.register_module(module_state['type'])
    module.set_name(module_state['name'])
    if 'condition' in module_state and module_state['condition'] is not None:
        b2pp.deserialize_conditions(module, module_state)
    if 'flag' in module_state and module_state['flag']:
        # for some modules, this flag might be changed from the default
        module.set_property_flags(basf2.ModulePropFlags.PARALLELPROCESSINGCERTIFIED)
    for parameter_state in module_state['parameters']:
        module.param(parameter_state['name'],
                     b2pp.deserialize_value(module, parameter_state))


def get_alias_dict_from_file(file_path):
    """
    Returns alias dictionary from pickle file.  If no aliases are stored in the
    pickle file, returns an empty dictionary.
    """
    with open(file_path, 'br') as pickle_file:
        serialized = pickle.load(pickle_file)
    try:
        return serialized["aliases"]
    except KeyError:
        return {}


def apply_alias_dict_from_file(file_path):
    """
    Extract alias dictionary from pickle file and adds them to the variable manager
    """
    alias_dict = get_alias_dict_from_file(file_path)
    for alias_name, alias_value in alias_dict.items():
        vm.addAlias(alias_name, alias_value)


if __name__ == '__main__':
    # monkey-patch deserialize_module so that pickle_utils also support python modules
    b2pp.deserialize_module = deserialize_module_or_pymodule

    pickle_file_path = "{{ pickle_file_path }}"
    if not os.path.isfile(pickle_file_path):
        raise FileNotFoundError(f"No pickle file found in {pickle_file_path}")

    apply_alias_dict_from_file(pickle_file_path)
    path = b2pp.get_path_from_file(pickle_file_path)

    basf2.print_path(path)
    basf2.process(path, max_event={{ max_event }})
    print(basf2.statistics)
